{"ast":null,"code":"export function combine() {\n  var composables = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    composables[_i] = arguments[_i];\n  }\n  var callbacks = [];\n  composables.forEach(function (composable) {\n    if (Array.isArray(composable)) {\n      callbacks.push.apply(callbacks, composable);\n    } else {\n      callbacks.push(composable);\n    }\n  });\n  return callbacks;\n}\nexport default combine;","map":{"version":3,"names":["combine","composables","_i","arguments","length","callbacks","forEach","composable","Array","isArray","push","apply"],"sources":["/Users/sumeetpravinjumde/Documents/Work/Coding/Ginger/Frontend/node_modules/reassemble/lib/combine.ts"],"sourcesContent":["import { Composable, ComponentCallbacks } from \"./blueprint\";\n\nexport function combine(...composables: Composable[]): Composable {\n  const callbacks: ComponentCallbacks[] = [];\n  composables.forEach((composable) => {\n    if (Array.isArray(composable)) {\n      callbacks.push(...composable);\n    } else {\n      callbacks.push(composable);\n    }\n  });\n  return callbacks;\n}\n\nexport default combine;\n"],"mappings":"AAEA,OAAM,SAAAA,QAAA;EAAkB,IAAAC,WAAA;OAAA,IAAAC,EAAA,IAA4B,EAA5BA,EAAA,GAAAC,SAAA,CAAAC,MAA4B,EAA5BF,EAAA,EAA4B;IAA5BD,WAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;EACtB,IAAMG,SAAS,GAAyB,EAAE;EAC1CJ,WAAW,CAACK,OAAO,CAAC,UAACC,UAAU;IAC7B,IAAIC,KAAK,CAACC,OAAO,CAACF,UAAU,CAAC,EAAE;MAC7BF,SAAS,CAACK,IAAI,CAAAC,KAAA,CAAdN,SAAS,EAASE,UAAU;IAC9B,CAAC,MAAM;MACLF,SAAS,CAACK,IAAI,CAACH,UAAU,CAAC;IAC5B;EACF,CAAC,CAAC;EACF,OAAOF,SAAS;AAClB;AAEA,eAAeL,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}