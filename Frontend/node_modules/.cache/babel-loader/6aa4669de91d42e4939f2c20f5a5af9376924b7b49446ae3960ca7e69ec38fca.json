{"ast":null,"code":"var _jsxFileName = \"/Users/sumeetpravinjumde/Documents/Work/Coding/Ginger/Frontend/src/user/Pages/Users.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport UserList from \"../Components/UserList\";\nimport ErrorModal from \"../../shared/Components/ErrorModal\";\nimport LoadingSpinner from \"../../shared/Components/LoadingSpinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Users = () => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n  const [loadedUsers, setLoadedUsers] = useState();\n  useEffect(() => {\n    const sendRequest = async () => {\n      setIsLoading(true);\n      try {\n        const response = await fetch('http://localhost:4000/api/users');\n        const responseData = await response.json();\n\n        // This will check all errors if error exist for 400 and 500 it will catch which is not genrally catched.\n        if (!response.ok) {\n          throw new Error(responseData.message);\n        }\n        setLoadedUsers(responseData.users);\n      } catch (err) {\n        setError(err.message);\n      }\n      setIsLoading(false);\n    };\n    sendRequest();\n  }, []);\n  const errorHandler = () => {\n    setError(null);\n  };\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ErrorModal, {\n      error: error,\n      onClear: errorHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(UserList, {\n      items: loadedUsers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(Users, \"K5OAGCrl7e4tb/qZAAzQOBxXnng=\");\n_c = Users;\nexport default Users;\nvar _c;\n$RefreshReg$(_c, \"Users\");","map":{"version":3,"names":["React","useEffect","useState","UserList","ErrorModal","LoadingSpinner","jsxDEV","_jsxDEV","Users","_s","isLoading","setIsLoading","error","setError","loadedUsers","setLoadedUsers","sendRequest","response","fetch","responseData","json","ok","Error","message","users","err","errorHandler","Fragment","children","onClear","fileName","_jsxFileName","lineNumber","columnNumber","items","_c","$RefreshReg$"],"sources":["/Users/sumeetpravinjumde/Documents/Work/Coding/Ginger/Frontend/src/user/Pages/Users.js"],"sourcesContent":["import React,{useEffect, useState} from \"react\";\nimport UserList from \"../Components/UserList\";\nimport ErrorModal from \"../../shared/Components/ErrorModal\";\nimport LoadingSpinner from \"../../shared/Components/LoadingSpinner\";\n\nconst Users = () => {\n  const [isLoading,setIsLoading] = useState(false);\n  const [error,setError] = useState();\n  const [loadedUsers,setLoadedUsers] = useState();\n\n  useEffect(()=>{\n    const sendRequest = async () =>{\n      setIsLoading(true);\n        try{\n          const response = await fetch('http://localhost:4000/api/users');\n\n          const responseData = await response.json();\n          \n          // This will check all errors if error exist for 400 and 500 it will catch which is not genrally catched.\n          if(!response.ok){\n            throw new Error(responseData.message);\n          }\n\n          setLoadedUsers(responseData.users);   \n        }\n        catch(err){        \n          setError(err.message);\n        }\n      setIsLoading(false);\n    };\n    sendRequest();\n  },[]);\n\nconst errorHandler = () => {\n  setError(null);\n};\n\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear = {errorHandler} />\n      {isLoading && (\n        <div>\n          <LoadingSpinner />\n        </div>\n      )}\n      <UserList items={loadedUsers} />\n    </React.Fragment>\n  );\n};\n\nexport default Users;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAEC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAC/C,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,cAAc,MAAM,wCAAwC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpE,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,SAAS,EAACC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAChD,MAAM,CAACU,KAAK,EAACC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,CAAC;EACnC,MAAM,CAACY,WAAW,EAACC,cAAc,CAAC,GAAGb,QAAQ,CAAC,CAAC;EAE/CD,SAAS,CAAC,MAAI;IACZ,MAAMe,WAAW,GAAG,MAAAA,CAAA,KAAW;MAC7BL,YAAY,CAAC,IAAI,CAAC;MAChB,IAAG;QACD,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,CAAC;QAE/D,MAAMC,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;QAE1C;QACA,IAAG,CAACH,QAAQ,CAACI,EAAE,EAAC;UACd,MAAM,IAAIC,KAAK,CAACH,YAAY,CAACI,OAAO,CAAC;QACvC;QAEAR,cAAc,CAACI,YAAY,CAACK,KAAK,CAAC;MACpC,CAAC,CACD,OAAMC,GAAG,EAAC;QACRZ,QAAQ,CAACY,GAAG,CAACF,OAAO,CAAC;MACvB;MACFZ,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC;IACDK,WAAW,CAAC,CAAC;EACf,CAAC,EAAC,EAAE,CAAC;EAEP,MAAMU,YAAY,GAAGA,CAAA,KAAM;IACzBb,QAAQ,CAAC,IAAI,CAAC;EAChB,CAAC;EAGC,oBACEN,OAAA,CAACP,KAAK,CAAC2B,QAAQ;IAAAC,QAAA,gBACbrB,OAAA,CAACH,UAAU;MAACQ,KAAK,EAAEA,KAAM;MAACiB,OAAO,EAAIH;IAAa;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACpDvB,SAAS,iBACRH,OAAA;MAAAqB,QAAA,eACErB,OAAA,CAACF,cAAc;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACf,CACN,eACD1B,OAAA,CAACJ,QAAQ;MAAC+B,KAAK,EAAEpB;IAAY;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClB,CAAC;AAErB,CAAC;AAACxB,EAAA,CA5CID,KAAK;AAAA2B,EAAA,GAAL3B,KAAK;AA8CX,eAAeA,KAAK;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}