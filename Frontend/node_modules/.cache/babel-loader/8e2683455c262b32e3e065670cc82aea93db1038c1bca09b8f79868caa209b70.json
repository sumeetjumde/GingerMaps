{"ast":null,"code":"import parseDuration from \"./parseDuration\";\nexport function parseComputedTransition(computed) {\n  var lastProperty = null;\n  var firstProperty = null;\n  var lastPropertyTotalDuration = -1;\n  var firstPropertyDelay = 99999999;\n  var properties = computed.transitionProperty.split(/\\s*,\\s*/);\n  var delays = computed.transitionDelay.split(/\\s*,\\s*/);\n  var durations = computed.transitionDuration.split(/\\s*,\\s*/);\n  properties.forEach(function (property, i) {\n    var duration = parseDuration(durations[i]);\n    var delay = parseDuration(delays[i]);\n    var totalDuration = duration + delay;\n    if (totalDuration > lastPropertyTotalDuration) {\n      lastPropertyTotalDuration = totalDuration;\n      lastProperty = {\n        property: property,\n        duration: duration,\n        delay: delay\n      };\n    }\n    if (delay < firstPropertyDelay) {\n      firstPropertyDelay = delay;\n      firstProperty = {\n        property: property,\n        duration: duration,\n        delay: delay\n      };\n    }\n  });\n  return [firstProperty, lastProperty];\n}\nexport default parseComputedTransition;","map":{"version":3,"names":["parseDuration","parseComputedTransition","computed","lastProperty","firstProperty","lastPropertyTotalDuration","firstPropertyDelay","properties","transitionProperty","split","delays","transitionDelay","durations","transitionDuration","forEach","property","i","duration","delay","totalDuration"],"sources":["/Users/sumeetpravinjumde/Documents/Work/Coding/Ginger/Frontend/node_modules/react-css-transition/lib/utils/utils/parseComputedTransition.ts"],"sourcesContent":["import parseDuration from \"./parseDuration\";\nimport { TransitionEntry } from \"./parseTransition\";\n\nexport function parseComputedTransition(computed: any): [TransitionEntry, TransitionEntry] {\n  let lastProperty: TransitionEntry = null;\n  let firstProperty: TransitionEntry = null;\n  let lastPropertyTotalDuration = -1;\n  let firstPropertyDelay = 99999999;\n  const properties = computed.transitionProperty.split(/\\s*,\\s*/);\n  const delays = computed.transitionDelay.split(/\\s*,\\s*/);\n  const durations = computed.transitionDuration.split(/\\s*,\\s*/);\n  properties.forEach(\n    (property: string, i: number) => {\n      const duration = parseDuration(durations[i]);\n      const delay = parseDuration(delays[i]);\n      const totalDuration = duration + delay;\n      if (totalDuration > lastPropertyTotalDuration) {\n        lastPropertyTotalDuration = totalDuration;\n        lastProperty = { property, duration, delay };\n      }\n      if (delay < firstPropertyDelay) {\n        firstPropertyDelay = delay;\n        firstProperty = { property, duration, delay };\n      }\n    },\n  );\n  return [firstProperty, lastProperty];\n}\n\nexport default parseComputedTransition;\n"],"mappings":"AAAA,OAAOA,aAAa,MAAM,iBAAiB;AAG3C,OAAM,SAAAC,wBAAkCC,QAAa;EACnD,IAAIC,YAAY,GAAoB,IAAI;EACxC,IAAIC,aAAa,GAAoB,IAAI;EACzC,IAAIC,yBAAyB,GAAG,CAAC,CAAC;EAClC,IAAIC,kBAAkB,GAAG,QAAQ;EACjC,IAAMC,UAAU,GAAGL,QAAQ,CAACM,kBAAkB,CAACC,KAAK,CAAC,SAAS,CAAC;EAC/D,IAAMC,MAAM,GAAGR,QAAQ,CAACS,eAAe,CAACF,KAAK,CAAC,SAAS,CAAC;EACxD,IAAMG,SAAS,GAAGV,QAAQ,CAACW,kBAAkB,CAACJ,KAAK,CAAC,SAAS,CAAC;EAC9DF,UAAU,CAACO,OAAO,CAChB,UAACC,QAAgB,EAAEC,CAAS;IAC1B,IAAMC,QAAQ,GAAGjB,aAAa,CAACY,SAAS,CAACI,CAAC,CAAC,CAAC;IAC5C,IAAME,KAAK,GAAGlB,aAAa,CAACU,MAAM,CAACM,CAAC,CAAC,CAAC;IACtC,IAAMG,aAAa,GAAGF,QAAQ,GAAGC,KAAK;IACtC,IAAIC,aAAa,GAAGd,yBAAyB,EAAE;MAC7CA,yBAAyB,GAAGc,aAAa;MACzChB,YAAY,GAAG;QAAEY,QAAQ,EAAAA,QAAA;QAAEE,QAAQ,EAAAA,QAAA;QAAEC,KAAK,EAAAA;MAAA,CAAE;IAC9C;IACA,IAAIA,KAAK,GAAGZ,kBAAkB,EAAE;MAC9BA,kBAAkB,GAAGY,KAAK;MAC1Bd,aAAa,GAAG;QAAEW,QAAQ,EAAAA,QAAA;QAAEE,QAAQ,EAAAA,QAAA;QAAEC,KAAK,EAAAA;MAAA,CAAE;IAC/C;EACF,CAAC,CACF;EACD,OAAO,CAACd,aAAa,EAAED,YAAY,CAAC;AACtC;AAEA,eAAeF,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}