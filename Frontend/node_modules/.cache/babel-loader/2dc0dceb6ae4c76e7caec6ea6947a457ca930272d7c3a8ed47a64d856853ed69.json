{"ast":null,"code":"/* tslint:disable: no-bitwise */\nimport { lazyLoadCallback, skipCallback } from \"./blueprint\";\nimport resolveValue from \"./utils/resolveValue\";\nimport toArray from \"./utils/toArray\";\nvar resolveCallbacks = function (list) {\n  return list.reduce(function (result, c) {\n    result.push.apply(result, resolveValue(c.instanceCallbacks));\n    return result;\n  }, []);\n};\nexport function branch(test, left, right) {\n  if (right === void 0) {\n    right = [];\n  }\n  var leftList = toArray(left);\n  var rightList = toArray(right);\n  return {\n    instanceCallbacks: function () {\n      var loaded = {\n        left: false,\n        right: false\n      };\n      var isTrue;\n      return [lazyLoadCallback(function (props) {\n        isTrue = test(props);\n        if (!loaded.left && isTrue) {\n          loaded.left = true;\n          var newCallbacks = resolveCallbacks(leftList);\n          var skip_1 = newCallbacks.length;\n          newCallbacks.unshift(skipCallback(function () {\n            return isTrue ? 0 : skip_1;\n          }));\n          return newCallbacks;\n        }\n        if (!loaded.right && !isTrue) {\n          loaded.right = true;\n          var newCallbacks = resolveCallbacks(rightList);\n          var skip_2 = newCallbacks.length;\n          newCallbacks.unshift(skipCallback(function () {\n            return isTrue ? skip_2 : 0;\n          }));\n          return newCallbacks;\n        }\n        return null;\n      })];\n    }\n  };\n}\nexport default branch;","map":{"version":3,"names":["lazyLoadCallback","skipCallback","resolveValue","toArray","resolveCallbacks","list","reduce","result","c","push","apply","instanceCallbacks","branch","test","left","right","leftList","rightList","loaded","isTrue","props","newCallbacks","skip_1","length","unshift","skip_2"],"sources":["/Users/sumeetpravinjumde/Documents/Work/Coding/Ginger/Frontend/node_modules/reassemble/lib/branch.ts"],"sourcesContent":["/* tslint:disable: no-bitwise */\n\nimport { Composable, ComponentCallbacks, InstanceCallbackList, lazyLoadCallback, skipCallback } from \"./blueprint\";\nimport { Predicate } from \"./types\";\nimport resolveValue from \"./utils/resolveValue\";\nimport toArray from \"./utils/toArray\";\n\nconst resolveCallbacks = (list: ComponentCallbacks[]) => list.reduce<InstanceCallbackList>(\n  (result, c) => {\n    result.push(...resolveValue(c.instanceCallbacks));\n    return result;\n  }, []);\n\nexport function branch(\n  test: Predicate<any>,\n  left: Composable,\n  right?: Composable,\n): Composable;\n\nexport function branch<T>(\n  test: Predicate<T>,\n  left: Composable,\n  right?: Composable,\n): Composable;\n\nexport function branch<T>(\n  test: Predicate<T>,\n  left: Composable,\n  right: Composable = [],\n): Composable {\n  const leftList = toArray(left);\n  const rightList = toArray(right);\n  return {\n    instanceCallbacks: () => {\n      const loaded = { left: false, right: false };\n      let isTrue: boolean;\n      return [\n        lazyLoadCallback((props) => {\n          isTrue = test(props);\n          if (!loaded.left && isTrue) {\n            loaded.left = true;\n            const newCallbacks = resolveCallbacks(leftList);\n            const skip = newCallbacks.length;\n            newCallbacks.unshift(\n              skipCallback(() => isTrue ? 0 : skip),\n            );\n            return newCallbacks;\n          }\n          if (!loaded.right && !isTrue) {\n            loaded.right = true;\n            const newCallbacks = resolveCallbacks(rightList);\n            const skip = newCallbacks.length;\n            newCallbacks.unshift(\n              skipCallback(() => isTrue ? skip : 0),\n            );\n            return newCallbacks;\n          }\n          return null;\n        }),\n      ];\n    },\n  };\n}\n\nexport default branch;\n"],"mappings":"AAAA;AAEA,SAA+DA,gBAAgB,EAAEC,YAAY,QAAQ,aAAa;AAElH,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,OAAOC,OAAO,MAAM,iBAAiB;AAErC,IAAMC,gBAAgB,GAAG,SAAAA,CAACC,IAA0B;EAAK,OAAAA,IAAI,CAACC,MAAM,CAClE,UAACC,MAAM,EAAEC,CAAC;IACRD,MAAM,CAACE,IAAI,CAAAC,KAAA,CAAXH,MAAM,EAASL,YAAY,CAACM,CAAC,CAACG,iBAAiB,CAAC;IAChD,OAAOJ,MAAM;EACf,CAAC,EAAE,EAAE,CAAC;AAJiD,CAIjD;AAcR,OAAM,SAAAK,OACJC,IAAkB,EAClBC,IAAgB,EAChBC,KAAsB;EAAtB,IAAAA,KAAA;IAAAA,KAAA,KAAsB;EAAA;EAEtB,IAAMC,QAAQ,GAAGb,OAAO,CAACW,IAAI,CAAC;EAC9B,IAAMG,SAAS,GAAGd,OAAO,CAACY,KAAK,CAAC;EAChC,OAAO;IACLJ,iBAAiB,EAAE,SAAAA,CAAA;MACjB,IAAMO,MAAM,GAAG;QAAEJ,IAAI,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAK,CAAE;MAC5C,IAAII,MAAe;MACnB,OAAO,CACLnB,gBAAgB,CAAC,UAACoB,KAAK;QACrBD,MAAM,GAAGN,IAAI,CAACO,KAAK,CAAC;QACpB,IAAI,CAACF,MAAM,CAACJ,IAAI,IAAIK,MAAM,EAAE;UAC1BD,MAAM,CAACJ,IAAI,GAAG,IAAI;UAClB,IAAMO,YAAY,GAAGjB,gBAAgB,CAACY,QAAQ,CAAC;UAC/C,IAAMM,MAAI,GAAGD,YAAY,CAACE,MAAM;UAChCF,YAAY,CAACG,OAAO,CAClBvB,YAAY,CAAC;YAAM,OAAAkB,MAAM,GAAG,CAAC,GAAGG,MAAI;UAAjB,CAAiB,CAAC,CACtC;UACD,OAAOD,YAAY;QACrB;QACA,IAAI,CAACH,MAAM,CAACH,KAAK,IAAI,CAACI,MAAM,EAAE;UAC5BD,MAAM,CAACH,KAAK,GAAG,IAAI;UACnB,IAAMM,YAAY,GAAGjB,gBAAgB,CAACa,SAAS,CAAC;UAChD,IAAMQ,MAAI,GAAGJ,YAAY,CAACE,MAAM;UAChCF,YAAY,CAACG,OAAO,CAClBvB,YAAY,CAAC;YAAM,OAAAkB,MAAM,GAAGM,MAAI,GAAG,CAAC;UAAjB,CAAiB,CAAC,CACtC;UACD,OAAOJ,YAAY;QACrB;QACA,OAAO,IAAI;MACb,CAAC,CAAC,CACH;IACH;GACD;AACH;AAEA,eAAeT,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}